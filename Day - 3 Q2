import java.util.*;

class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals.length == 0) return new int[0][];
        
        // Sort intervals based on the starting value
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        
        int[][] arr = new int[intervals.length][2]; // Use a reasonable size
        int index = 0;
        
        // Initialize with the first interval
        int cs = intervals[0][0];
        int ce = intervals[0][1];

        for (int i = 1; i < intervals.length; i++) {
            int ns = intervals[i][0];
            int ne = intervals[i][1];
            
            if (ce >= ns) {
                // Merge intervals
                ce = Math.max(ce, ne);
            } else {
                // Store the previous merged interval
                arr[index][0] = cs;
                arr[index][1] = ce;
                index++;
                
                // Update current start and end
                cs = ns;
                ce = ne;
            }
        }
        
        // Store the last merged interval
        arr[index][0] = cs;
        arr[index][1] = ce;
        index++;
        
        // Copy only the filled elements to the result
        return Arrays.copyOf(arr, index);
    }
}

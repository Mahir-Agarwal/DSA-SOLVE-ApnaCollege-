class Solution {
    public int[] productExceptSelf(int[] nums) {
        // Create two arrays, left and right, to store the left and right product values for each element
        int[] right = new int[nums.length]; // Array to store the product of all elements to the right of index i
        int[] left = new int[nums.length];  // Array to store the product of all elements to the left of index i
        
        // Initialize the left array, starting with 1 as there are no elements to the left of the first element
        left[0] = 1;
        
        // Fill the left array: left[i] will contain the product of all elements before index i
        for (int i = 1; i < nums.length; i++) {
            left[i] = left[i - 1] * nums[i - 1]; // Left product for index i is the product of left[i-1] and nums[i-1]
        }

        // Initialize the right array, starting with 1 as there are no elements to the right of the last element
        right[nums.length - 1] = 1;
        
        // Fill the right array: right[i] will contain the product of all elements after index i
        for (int i = nums.length - 2; i >= 0; i--) {
            right[i] = right[i + 1] * nums[i + 1]; // Right product for index i is the product of right[i+1] and nums[i+1]
        }

        // Now update the original array nums with the product of left[i] and right[i] for each index i
        for (int i = 0; i < nums.length; i++) {
            nums[i] = left[i] * right[i]; // The result for index i is the product of left and right products
        }

        // Return the updated nums array which contains the product of all elements except self
        return nums;
    }
}

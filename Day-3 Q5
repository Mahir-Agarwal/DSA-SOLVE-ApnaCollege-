class Solution {
    public boolean find(char[][] board, int i, int j, String word, int index) {
        // Base case: if we've matched the entire word
        if (index == word.length()) {
            return true;
        }

        // Check boundaries and conditions
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] == '$') {
            return false;
        }

        // Check if current character matches the word character at index
        if (board[i][j] != word.charAt(index)) {
            return false;
        }

        // Mark cell as visited
        char temp = board[i][j];
        board[i][j] = '$';

        // Explore all possible directions: up, down, left, and right
        boolean found = find(board, i + 1, j, word, index + 1) || // Down
                        find(board, i - 1, j, word, index + 1) || // Up
                        find(board, i, j + 1, word, index + 1) || // Right
                        find(board, i, j - 1, word, index + 1);   // Left

        // Restore the cell value for backtracking
        board[i][j] = temp;

        return found;
    }

    public boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                // Start searching if the first letter matches
                if (board[i][j] == word.charAt(0) && find(board, i, j, word, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
}
